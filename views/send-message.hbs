<!-- views/send-message.hbs -->
<!DOCTYPE html>
<html>
<head>
    <title>WhatsApp Bulk Messenger</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
    </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
    <div class="container mx-auto px-4 py-8 max-w-7xl">
        <h1 class="text-3xl font-bold text-gray-800 text-center mb-8">
            <span class="text-green-600">WhatsApp</span> Bulk Message Sender
        </h1>
        
        <div class="grid grid-cols-1 lg:grid-cols-12 gap-6">
            <!-- WhatsApp Initialization Card (1/3 width) -->
            <div class="lg:col-span-4">
                <div class="bg-white rounded-xl shadow-lg p-6 h-full">
                    <h2 class="text-xl font-semibold text-gray-700 mb-4">Initialize WhatsApp</h2>
                    <div id="status-message" class="p-4 rounded-lg bg-blue-50 text-blue-700 mb-4">
                        Click initialize to start WhatsApp bot
                    </div>
                    <div id="qrcode" class="flex justify-center my-6 min-h-[256px] border-x rounded-xl items-center">
                        <!-- WhatsApp Logo Placeholder -->
                        <div id="whatsapp-placeholder" class="text-center">
                            <svg class="w-24 h-24 mx-auto mb-4 text-green-600" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12.031 6.172c-3.181 0-5.767 2.586-5.768 5.766-.001 1.298.38 2.27 1.019 3.287l-.582 2.128 2.182-.573c.978.58 1.911.928 3.145.929 3.178 0 5.767-2.587 5.768-5.766.001-3.187-2.575-5.77-5.764-5.771zm3.392 8.244c-.144.405-.837.774-1.17.824-.299.045-.677.063-1.092-.069-.252-.08-.575-.187-.988-.365-1.739-.751-2.874-2.502-2.961-2.617-.087-.116-.708-.94-.708-1.793s.448-1.273.607-1.446c.159-.173.346-.217.462-.217l.332.006c.106.005.249-.04.39.298.144.347.491 1.2.534 1.287.043.087.072.188.014.304-.058.116-.087.188-.173.289l-.26.304c-.087.086-.177.18-.076.354.101.174.449.741.964 1.201.662.591 1.221.774 1.394.86s.274.072.376-.043c.101-.116.433-.506.549-.68.116-.173.231-.145.39-.087s1.011.477 1.184.564.289.13.332.202c.045.072.045.419-.1.824zm-3.423-14.416c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm.029 18.88c-1.161 0-2.305-.292-3.318-.844l-3.677.964.984-3.595c-.607-1.052-.927-2.246-.926-3.468.001-3.825 3.113-6.937 6.937-6.937 1.856.001 3.598.723 4.907 2.034 1.31 1.311 2.031 3.054 2.03 4.908-.001 3.825-3.113 6.938-6.937 6.938z"/>
                            </svg>
                            {{!-- <p class="text-gray-500 text-sm">Waiting for QR Code...</p> --}}
                        </div>
                    </div>
                    <button id="initButton" class="w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg transition duration-200 transform hover:scale-[1.02]">
                        Initialize WhatsApp
                    </button>
                </div>
            </div>

            <!-- Message Form Section (2/3 width) -->
            <div class="lg:col-span-8">
                <div id="messageForm" class="bg-white rounded-xl shadow-lg p-6 h-full">
                    <div class="flex items-center justify-between mb-4">
                        <h2 class="text-xl font-semibold text-gray-700">Send Messages</h2>
                        <span id="connectionStatus" class="px-3 py-1 text-sm rounded-full bg-yellow-50 text-yellow-700">
                            Not Connected
                        </span>
                    </div>
                    <form id="sendMessageForm" class="space-y-6">
                        <fieldset id="formFields" disabled class="space-y-6 opacity-60 transition-opacity duration-200">
                            <div>
                                <label for="phoneNumbers" class="block text-sm font-medium text-gray-700 mb-2">
                                    Phone Numbers (comma-separated)
                                </label>
                                <input type="text" id="phoneNumbers" name="phoneNumbers" 
                                       class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-green-500 focus:border-green-500 outline-none transition duration-200"
                                       required>
                            </div>
                            <div>
                                <label for="message" class="block text-sm font-medium text-gray-700 mb-2">
                                    Message
                                </label>
                                <textarea id="message" name="message" rows="4" 
                                        class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-green-500 focus:border-green-500 outline-none transition duration-200"
                                        required></textarea>
                            </div>
                            <div class="grid grid-cols-2 gap-4">
                                <div>
                                    <label for="minDelay" class="block text-sm font-medium text-gray-700 mb-2">
                                        Minimum Delay (ms)
                                    </label>
                                    <input type="number" id="minDelay" name="minDelay" value="2000"
                                           class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-green-500 focus:border-green-500 outline-none transition duration-200"
                                           required>
                                </div>
                                <div>
                                    <label for="maxDelay" class="block text-sm font-medium text-gray-700 mb-2">
                                        Maximum Delay (ms)
                                    </label>
                                    <input type="number" id="maxDelay" name="maxDelay" value="4000"
                                           class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-green-500 focus:border-green-500 outline-none transition duration-200"
                                           required>
                                </div>
                            </div>
                            {{!-- <div id="sendStatus" class="mt-4 hidden"></div> --}}
                            <button type="submit" class="w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg transition duration-200 transform hover:scale-[1.02] flex items-center justify-center gap-2">
                                Send Message
                            </button>
                        </fieldset>
                    </form>
                </div>
            </div>
        </div>
        <div id="sendStatus" class="mt-4 w-full hidden"></div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const initButton = document.getElementById('initButton');
        const messageForm = document.getElementById('messageForm');
        const formFields = document.getElementById('formFields');
        const connectionStatus = document.getElementById('connectionStatus');

        // Initialize button click handler
        initButton.addEventListener('click', async () => {
            try {
                initButton.disabled = true;
                updateStatus('Initializing WhatsApp bot...', 'info');
                
                const response = await fetch('/initialize-whatsapp', { 
                    method: 'POST'
                });
                
                if (!response.ok) {
                    throw new Error('Failed to initialize WhatsApp');
                }
            } catch (error) {
                console.error('Initialization error:', error);
                updateStatus('Failed to initialize WhatsApp', 'error');
                initButton.disabled = false;
            }
        });

        // Initialize QR Code instance
        let qrcode = null;

        socket.on('qr', (qr) => {
            console.log('QR Code received, generating...');
            try {
                // Hide the placeholder
                const placeholder = document.getElementById('whatsapp-placeholder');
                if (placeholder) {
                    placeholder.style.display = 'none';
                }

                // Clear previous QR code
                if (qrcode) {
                    qrcode.clear();
                }
                
                // Create or update QR code instance
                if (!qrcode) {
                    qrcode = new QRCode("qrcode", {
                        text: qr,
                        width: 256,
                        height: 256,
                        colorDark: "#000000",
                        colorLight: "#ffffff",
                        correctLevel: QRCode.CorrectLevel.H
                    });
                } else {
                    qrcode.makeCode(qr);
                }

                updateStatus('Scan this QR code with WhatsApp', 'info');
                console.log('QR code generated successfully');
            } catch (error) {
                console.error('QR Code generation error:', error);
                updateStatus('Failed to generate QR code', 'error');
            }
        });

        // Update the ready event handler
        socket.on('ready', () => {
            updateStatus('WhatsApp bot is ready!', 'success');
            formFields.disabled = false;
            formFields.classList.remove('opacity-60');
            connectionStatus.className = 'px-3 py-1 text-sm rounded-full bg-green-50 text-green-700';
            connectionStatus.textContent = 'Connected';
        });

        // Update the disconnected event handler
        socket.on('disconnected', () => {
            updateStatus('WhatsApp disconnected. Please reinitialize.', 'warning');
            formFields.disabled = true;
            formFields.classList.add('opacity-60');
            connectionStatus.className = 'px-3 py-1 text-sm rounded-full bg-yellow-50 text-yellow-700';
            connectionStatus.textContent = 'Not Connected';
            initButton.disabled = false;
        });

        // Add form handling
        const sendMessageForm = document.getElementById('sendMessageForm');

        sendMessageForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const submitButton = sendMessageForm.querySelector('button[type="submit"]');
            
            try {
                // Update UI - Loading state
                submitButton.disabled = true;
                submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Sending...';
                updateSendStatus('', false);

                // Get form data
                const formData = new FormData(sendMessageForm);
                const payload = {
                    phoneNumbers: formData.get('phoneNumbers').split(',').map(num => num.trim()),
                    message: formData.get('message'),
                    minDelay: parseInt(formData.get('minDelay')),
                    maxDelay: parseInt(formData.get('maxDelay'))
                };

                // Send request
                const response = await fetch('/send-message', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();

                // Show response
                if (response.ok) {
                    updateSendStatus('Messages sent successfully!', true);
                    sendMessageForm.reset(); // Clear form on success
                } else {
                    throw new Error(result.error || 'Failed to send messages');
                }
            } catch (error) {
                console.error('Send error:', error);
                updateSendStatus(error.message, false);
            } finally {
                // Reset button state
                submitButton.disabled = false;
                submitButton.textContent = 'Send Message';
            }
        });

        // Update status message classes
        function updateStatus(message, type) {
            const statusMessage = document.getElementById('status-message');
            statusMessage.textContent = message;
            
            // Remove all status classes
            statusMessage.className = 'p-4 rounded-lg';
            
            // Add appropriate color classes
            switch(type) {
                case 'info':
                    statusMessage.classList.add('bg-blue-50', 'text-blue-700');
                    break;
                case 'success':
                    statusMessage.classList.add('bg-green-50', 'text-green-700');
                    break;
                case 'error':
                    statusMessage.classList.add('bg-red-50', 'text-red-700');
                    break;
                case 'warning':
                    statusMessage.classList.add('bg-yellow-50', 'text-yellow-700');
                    break;
            }
        }

        // Update send status classes
        function updateSendStatus(message, isSuccess) {
            const sendStatus = document.getElementById('sendStatus');
            sendStatus.style.display = 'block';
            sendStatus.textContent = message;
            sendStatus.className = `mt-4 p-4 rounded-lg border-2 ${
                isSuccess 
                    ? 'bg-green-50 text-green-700 border-green-500' 
                    : 'bg-red-50 text-red-700 border-red-500'
            }`;
        }
    </script>
</body>
</html>
